function [Cs,cns] = findclass(pat,opts)
arguments(Input)
    pat (1,:) char = char.empty(1,0);
    opts.PatternIncludesPackageName  logical = false;
    opts.PackageNamePattern char = char.empty();
    opts.ClassNamePattern char = char.empty();
    opts.IgnoreCase logical = false;
    opts.Abstract {mustBeMember(opts.Abstract, {'include', 'exclude', 'require'})} = 'include';
    opts.Hidden {mustBeMember(opts.Hidden, {'include', 'exclude', 'require'})} = 'include';
    opts.Sealed {mustBeMember(opts.Sealed, {'include', 'exclude', 'require'})} = 'include';
    opts.Enum {mustBeMember(opts.Enum, {'include', 'exclude', 'require'})} = 'include';
    opts.HandleCompat {mustBeMember(opts.HandleCompat, {'include', 'exclude', 'require'})} = 'include';
    opts.MinInferiors {mustBeNonnegative, mustBeInteger} = 0;
    opts.MinSuperiors {mustBeNonnegative, mustBeInteger} = 0;
    opts.SearchAllInMem logical = true;
    opts.SearchAllPackages logical = false;
end

if isempty(pat)
    assert(~isempty(opts.ClassNamePattern) || ~isempty(opts.PackageNamePattern));
else
    if ~startsWith(pat, "^"|".*"|".+")
        pat = "^.*"+pat;
    end
    if ~endsWith(pat, "$"|".*"|".+")
        pat = pat+".*$";
    end
end

% fprintf('Pat: "%s"\n', pat);
%if opts.SearchAllInMem
%    [~,~,cns2] = inmem();
%    cns2 = setdiff(cns2, cns1, 'stable'); % cns2 = cns2';
%    cs2 = cellfun(@meta.class.fromName, cns2, 'UniformOutput', false);
%    [cs2, msk2] = filterclasses([cs2{:}], pat, opts.IgnoreCase, ...
%        opts.Abstract, opts.Hidden, opts.Sealed, opts.Enum, ...
%        opts.HandleCompat, opts.MinInferiors, opts.MinSuperiors, ...
%        true);
%    cns2 = cns2(msk2);
%    cs = [cs cs2];
%    cns = [ cns(:) ; cns2(:) ];
%end

if opts.SearchAllPackages
    %opts.SearchAllPackages = false;
    error('Searching all packages is currently not implemented.\n');
end

if opts.SearchAllInMem
    if opts.SearchAllPackages
        packs = meta.package.getAllPackages();
        allPackNames = ...
            cellfun(@(x) string(x.Name), packs, 'UniformOutput', true);
        %hasDDMask = cellfun(@(x) ~strcmp('',x.Description), packs);
        %noSubpacksMask = cellfun(@(x) isempty(x.Packages), packs);
        %childlessPacks = packs(noSubpacksMask);
        %nodpacks = packs(~hasDDMask);
        % string({nodpacks{1}.ClassList.Name}')
        numPacks = length(allPackNames);
        numFuts = fix(numPacks/75);
        nextIdx = numFuts*75 + 1;
        
        futs = parallel.Future.empty(0,numFuts+1);
        % classes = cell(numPacks);
        % classes = cell(numFuts+1);
        idxs = 1:75;
        for i=1:numFuts
            futs(i) = parfeval(backgroundPool, @getPacksClasses, 1, ...
                cellfun(@struct, packs(idxs), 'UniformOutput', false));
            idxs = idxs + 75;
        end
        futs(numFuts+1) = parfeval(backgroundPool, @getPacksClasses, 1, ...
            packs(nextIdx:end));
        stats = [futs.State];
        fprintf('Waiting for (%d+%d)/%d of %d futs to finish (timeout: 15s)...', ...
            sum(contains(stats,'queued')), ...
            sum(contains(stats,'running')), ...
            sum(~contains(stats,'unavailable')), ...
            numFuts+1);
        TF = wait(futs, "finished", 15);
        if ~TF
            cancel(futs);
            fprintf('..failed.\n');
            Cs = [];
            return;
        end
        Ccell = fetchOutputs(futs, 'UniformOutput', false);
    else
        [~, ~, fullClassNames] = inmem();% ("-completenames");
        splitNames = cellfun(@(x) string(strsplit(x, ...
            {'\.(?=[^.]+$)'}, "DelimiterType", "RegularExpression")), ...
            fullClassNames, 'UniformOutput', false);
        msk = cellfun(@(x) size(x,2)==2, splitNames);
        classNamesWithoutPack = splitNames(~msk); % Can assume have len. 1
        splitNamesWithPack = splitNames(msk);
        packNames = cellfun(@(x) x(1), splitNamesWithPack);
        [uniquePackNames, ~,~] ... % uniquePackIdxs, classPackIdxs] ...
            = unique(packNames);
        uniquePacks = cellfun(@meta.package.fromName, uniquePackNames, ...
            'UniformOutput', false);
        uniquePacks2 = cellfun( ...
            @(p) [p.PackageList], ...
            uniquePacks, 'UniformOutput', false);
        uniquePacks = vertcat(uniquePacks{:},uniquePacks2{:});
        [~, uniqueIdxs] = unique({uniquePacks.Name});
        uniquePacks = uniquePacks(uniqueIdxs);
        Ccell = {uniquePacks.ClassList};
        %Ccell = cellfun(@(x) [meta.package.fromName(x).ClassList], ...
        %    cellstr(uniquePackNames), 'UniformOutput', false);
        Ccell = [ Ccell(:) ; cellfun(@meta.class.fromName, ...
            classNamesWithoutPack, 'UniformOutput', false)];
    end
    Cs = vertcat(Ccell{:})';
else
    Cs = [meta.class.getAllClasses{:}];
    % TODO
    %cns = {cs.Name};
end
cns = {Cs.Name};
%fprintf('Num cns: %d\n', numel(cns));

if opts.PatternIncludesPackageName
    %fprintf('cns: %s\n', formattedDisplayText(cns));
    msk = matches(cns, regexpPattern(pat, "IgnoreCase", opts.IgnoreCase));
    %fprintf('msk sum: %d\n', sum(msk));
    cns = cns(msk)';
    Cs = Cs(msk)';
elseif isempty(opts.PackageNamePattern)
    opts.ClassNamePattern = pat;
end

if ~isempty(opts.PackageNamePattern) || ...
        (~isempty(opts.ClassNamePattern) && ~opts.PatternIncludesPackageName)
    splitNames = cellfun(@(x) string(strsplit(x, ...
        {'\.(?=[^.]+$)'}, "DelimiterType", "RegularExpression")), ...
        cellstr(cns), 'UniformOutput', false);
    % fprintf('Num splitNames: %d\n', numel(splitNames));
    msk = cellfun(@(x) size(x,2)==2, splitNames);
    % fprintf('msk sum: %d\n', sum(msk));
    splitNamesWithPack = splitNames(msk);

    if ~isempty(opts.PackageNamePattern)
        % splitNames = splitNames(msk);
        pat1 = regexpPattern(opts.PackageNamePattern, ...
                "IgnoreCase", opts.IgnoreCase, "Anchors", "text");
        if opts.ClassNamePattern
            pat2 = regexpPattern(opts.ClassNamePattern, ...
                "IgnoreCase", opts.IgnoreCase, "Anchors", "text");
            msk2 = cellfun(@(pcn) ...
                matches(pcn(1), pat1) & matches(pcn(2), pat2), ...
                splitNamesWithPack, 'UniformOutput', true);
        else
            packNames = cellfun(@(x) x(1), splitNamesWithPack);
            msk2 = matches(packNames, pat1);
            % packNames = packNames(msk2);
        end
        %fprintf('msk2 sum: %d\n', sum(msk2));
        cns = cellfun(@(pcn) string(join(pcn, ".")), ...%pcn(1)+"."+pcn(2), ...
                splitNamesWithPack(msk2), 'UniformOutput', false);
    elseif ~isempty(opts.ClassNamePattern)
        %classNames = horzcat(cellfun(@(x) string(x(2)), splitNamesWithPack), ...
        %    splitNames(~msk));
        % fprintf('classNames: %s\n', formattedDisplayText(classNames));
        pat2 = regexpPattern(opts.ClassNamePattern, ...
            "IgnoreCase", opts.IgnoreCase, "Anchors", "text");
        msk2 = matches( cellfun(@(x) string(x(2)), splitNamesWithPack), ...
            pat2);
        classNames = cellfun(@(pcn) string(join(pcn, ".")), ...%pcn(1)+"."+pcn(2), ...
            splitNamesWithPack(msk2), 'UniformOutput', false);
        splitNamesWithoutPack = horzcat(string(splitNames(~msk)), ...
            cellfun(@(x) string(x.Name), meta.class.getAllClasses())');
        msk3 = matches(string(splitNamesWithoutPack), pat2);
        % fprintf('splitNamesWithoutPack: %s\n', formattedDisplayText(splitNamesWithoutPack));
        %fprintf('msk2 sum: %d\n', sum(msk2)+sum(msk3));
        cns = horzcat(classNames, splitNamesWithoutPack(msk3));
    end
    Cs = cellfun(@meta.class.fromName, cns, 'UniformOutput', false);
    cns = string(cns)';
    Cs = vertcat(Cs{:})';
end
end
% 
% 
%     [~,~,cns2] = inmem();
%     cns2 = setdiff(cns2, cns1, 'stable'); % cns2 = cns2';
%     cs2 = cellfun(@meta.class.fromName, cns2, 'UniformOutput', false);
%     [cs2, msk2] = filterclasses([cs2{:}], pat, opts.IgnoreCase, ...
%         opts.Abstract, opts.Hidden, opts.Sealed, opts.Enum, ...
%         opts.HandleCompat, opts.MinInferiors, opts.MinSuperiors, ...
%         true);
%     cns2 = cns2(msk2);
%     cs = [cs cs2];
%     cns = [ cns(:) ; cns2(:) ];
% end
% 
% 
% 
% 
% filterclasses(cs, pat, ignoreCase, abstr, hidd, seal, enum, handcomp, ...
%     mininf, minsup, recurse)
% 
% 
% [cns1b, ia] = setdiff(cns1a, icns0);
% cs1b = cs1a(ia);
% [cs,msk1b] = filterclasses(cs1b, opts.Abstract, opts.Hidden, ...
%     opts.Sealed, opts.Enum, opts.HandleCompat, ...
%     opts.MinInferiors, opts.MinSuperiors, opts.RecursiveSubSearch); 
%end


function [cs,msk] = filterclasses(cs, pat, ignoreCase, abstr, hidd, seal, enum, handcomp, ...
    mininf, minsup, recurse)%, requiredSups, requiredInfs)

cns = {cs.Name};
if ~isempty(pat)
    msk = matches(cns, regexpPattern(pat, "IgnoreCase", ignoreCase, ...
        "Anchors", "text"));
    cs = cs(msk); % cns = cns(msk);
end

% msk = true(size(cs));
cs0 = cs; % cns0 = cns;

filts = [abstr;hidd;seal;enum;handcomp];
filtMask = (strcmp(filts,"require"));
if(any(filtMask))
    filtNums = find(filtMask);
    for filtNum = filtNums
        switch filtNum
            case 1
                mask = [cs.Abstract];
            case 2
                mask = [cs.Hidden];
            case 3
                mask = [cs.Sealed];
            case 4
                mask = [cs.Enumeration];
            case 5
                mask = [cs.Enumeration];
        end
        cs = cs(mask);
        %msk = msk & mask;
    end
    filtNums = find(~filtMask);
else
    filtNums = [1 2 3 4 5];
end

if(~isempty(filtNums))
    for filtNum = filtNums
        switch filtNum
            case 1
                mask = [cs.Abstract];
            case 2
                mask = [cs.Hidden];
            case 3
                mask = [cs.Sealed];
            case 4
                mask = [cs.Enumeration];
            case 5
                mask = [cs.Enumeration];
        end
        if(filts(filtNum)~="exclude")
            mask = ~mask;
        end
        cs = cs(mask);
        %msk(mask) = msk & mask;
    end
end

if minsup
    supCounts = cellfun(@length, {cs1.SuperclassList}, ...
        'UniformOutput', true);
    mask = (supCounts >= minsup);
    cs = cs(mask);
    %msk = msk & mask;
end
if mininf
    infClasses = {cs1.InferiorClasses};
    infCounts = cellfun(@length, infClasses, ...
        'UniformOutput', true);
    if recurse
        infCounts = infCounts + ...
            cellfun(@(cname,ics) length(setdiff(...
            subclasses(cname, "SearchAllInMem", true).Name, ics)), ...
            {cs.Name}, infClasses, 'UniformOutput', true);
    end
    mask = (infCounts >= mininf);
    cs = cs(mask);
    %msk = msk & mask;
end
msk = ismember(cs0, cs);
% cns = cns(msk);
end

% disp(string({meta.package.fromName('matlab.mixin').ClassList.Name})')

function Cs = getPacksClasses(Ps)
Cs = cellfun(@(p) getPackClasses(p), Ps, 'UniformOutput', false);
Cs = vertcat(Cs{:});
%idxs(cellfun(@isempty,Cs)) == NaN;
end

function Cs = getPackClasses(packInfo)
Cs = packInfo.ClassList;
if isempty(Cs)
    Cs = [];
    %idx = [];
end
%end
end

% Cs = findclasses('[Ii]nput'); string({Cs.Name})'