
function setupAcquisitionVideoObject(app)
    if ~isempty(app.vobj) && isscalar(app.vobj)
        if isa(app.vobj, 'videoinput') && isvalid(app.vobj)
            try
                flushdata(app.vobj);
            catch
            end
            if isrunning(app.vobj)
                stop(app.vobj);
                wait(app.vobj, 15, "running");
                if isrunning(app.vobj)
                    error('vobj is unresponsive.');
                end
                % TODO: Timeout / ask to continue waiting
            end
        else
            error('app.vobj is not a videoinput and/or is invalid.');
            % TODO: Create vobj?
        end
    else
        error('Nonscalar vobj.');
    end
    app.Analyzer.fph = 2\app.FPPSpinner.Value;
    app.FPPSpinner.UserData = true; % Now the args will be updated every time the FPPSpinner value changes
    newSPF = app.SPFField.NumericValue;
    useTimer = (newSPF >= 1/15);

    if useTimer
        args = { ...
            'TimerPeriod', round(newSPF,3,'TieBreaker', 'plusinf'), ... %round(1/newSPF,3,'TieBreaker', 'plusinf'), ...
            'FrameGrabInterval', 1, ...
            'FramesAcquiredFcnCount', 0, ...
            'FramesPerTrigger', app.Analyzer.fph, ...
            'TriggerRepeat', inf, ...
            'TimerFcn', { @sbsense.SBSenseApp.onVideoTimerTick }, ...
            'FramesAcquiredFcn', '', ...
            'TriggerFcn', { @sbsense.SBSenseApp.onAcquisitionTrigger } ...
        };
        trigtype = "manual";
    else
        args = { ...
            'FrameGrabInterval', ceil(1/newSPF), ...
            'FramesAcquiredFcnCount', 0, ... % app.Analyzer.fph, ...
            'FramesPerTrigger', app.Analyzer.fph, ... % Inf, ...
            'TriggerRepeat', inf, ... % 0, ...
            'TimerFcn', '', ...
            'FramesAcquiredFcn', '', ... % { @sbsense.SBSenseApp.onAcquisitionTrigger }, ...
            'TriggerFcn', { @sbsense.SBSenseApp.onAcquisitionTrigger } ... % '' ...
        };
        trigtype = "immediate";
    end
    
    args = [ args, { ...
            'UserData', struct( ...
            'resQueue', app.ResQueue, ...
            'HCQueue', app.Analyzer.HCQueue, ...
            'usingTimer', useTimer), ...
            'StartFcn', '', 'StopFcn', '' ...
        }]; % TODO Start/Stop/Error fcn?
    
    if isrunning(app.vobj)
        error('vobj is unresponsive.')
    end
    try
        flushdata(app.vobj);
    catch
    end
    triggerconfig(app.vobj, trigtype);
    set(app.vobj, args{:});
end

% 'StartFcn', app.vobj.StartFcn, 'StopFcn', app.vobj.StopFcn, ...
% 'TimerFcn', app.vobj.TimerFcn, 'TriggerFcn', app.vobj.TriggerFcn, ...
% 'FramesAcquiredFcn', app.vobj.FramesAcquiredFcn, ...
% 'FrameGrabInterval', app.vobj.FrameGrabInterval, ...
% 'FramesAcquiredFcnCount', app.vobj.FramesAcquiredFcnCount, ...
% 'FramesPerTrigger', app.vobj.FramesPerTrigger, ...
% 'TriggerRepeat', app.vobj.TriggerRepeat, 'TimerPeriod', ...
% app.vobj.TimerPeriod