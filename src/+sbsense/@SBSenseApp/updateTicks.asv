function [TF, majTickInfo] = updateTicks(app, typeIdx, lims, ...
    axisModeIndex, zoomModeOn, resUnit, assumeChanged, varargin)
    if typeIdx
        zoomModeOn = logical.empty();
        cmp = app.HgtAxes;
        cmps = [ cmp app.PosAxes];
        % cmp = cmps(1);
    else
        %zoomModeOn = app.XNavZoomMode;
        % cmp = cmps;
        cmps = app.XNavSlider;
    end

    [ minTicks, showMinTicks, minTicksChanged, majTicksChanged, ...
        majTicks, majLabels, majTickInfo ] = generateTicks( ...
        app.TimeZero, axisModeIndex, zoomModeOn, ...
        cmp.InnerPosition(3), lims, resUnit, assumeChanged, varargin{:});
    TF = minTicksChanged || majTicksChanged;
    if typeIdx
        if TF
            if ~showMinTicks && app.HgtAxes.XMinorTick
                
            %c = bitor(bitshift(majTicksChanged,1), minTicksChanged);
            rules = [app.FPRulers{axisModeIndex, :}];
            if majTicksChanged
                if minTicksChanged
                    try
                        set(rules, 'SnapTickValues', minTicks, ...
                            'MinorTickValues', minTicks, 'TickValues', majTicks);
                    catch ME
                        display(ME.identifier);
                       disp(class(minTicks));
                       disp(length(minTicks));
                       if ~isempty(minTicks)
                           display(minTicks([1 end]));
                           disp({min(diff(minTicks)), max(diff(minTicks))});
                       end
                       disp(class(majTicks));
                       disp(length(majTicks));
                       if ~isempty(majTicks)
                           display(majTicks([1 end]));
                           disp({min(diff(majTicks)), max(diff(majTicks))});
                       end
                       if ME.identifier == "MATLAB:hg:shaped_arrays:TickPredicate"
                           set(rules, 'MinorTickValues', [], 'TickValues', majTicks);
                       else
                           rethrow(ME);
                       end
                    end
                else
                    set(rules, 'TickValues', majTicks);
                end
                % TODO: Annotation lims
            elseif minTicksChanged
                try
                    set(rules, 'SnapTickValues', minTicks, ...
                        'MinorTickValues', minTicks);
                catch ME
                    disp(class(minTicks));
                    disp(length(minTicks));
                    if ~isempty(minTicks)
                        display(minTicks([1 end]));
                        disp({min(diff(minTicks)), max(diff(minTicks))});
                    end
                    if ME.identifier == "MATLAB:hg:shaped_arrays:TickPredicate"
                       set(rules, 'MinorTickValues', []);
                    else
                        rethrow(ME);
                    end
                end
            end
            if cmps(1).XMinorTick == showMinTicks
                return;
            end
        elseif cmps(1).XMinorTick ~= showMinTicks
            TF = true;
        else
            return;
        end
        set(cmps, 'XMinorTick', showMinTicks, 'XMinorGrid', showMinTicks);
        return;
    elseif majTicksChanged
        if minTicksChanged
            set(cmp, varargin{:}, 'MinorTicks', minTicks, 'SnapTicks', minTicks, ...
            'MajorTicks', majTicks, 'MajorTickLabels', majLabels);
        else
            set(cmp, varargin{:}, 'MajorTicks', majTicks, 'MajorTickLabels', majLabels);
        end
        if showMinTicks ~= isempty(cmp.MinorTicks)
            return;
        end
    elseif minTicksChanged
        % app.XNavSlider.MinorTicks = minTicks;
        % app.XNavSlider.SnapTicks = minTicks;
        set(cmp, varargin{:}, 'SnapTicks', minTicks, 'MinorTicks', minTicks);
        if showMinTicks ~= isempty(cmp.MinorTicks)
            return;
        end
    elseif ~isempty(varargin)
        set(cmp, varargin{:});
        TF = true;
    elseif showMinTicks == isempty(cmp.MinorTicks)
        TF = true;
    else
        return;
    end
    if showMinTicks
        cmp.MinorTicks = cmp.SnapTicks;
    else
        cmp.MinorTicks = [];
    end
end